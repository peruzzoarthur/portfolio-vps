---
services:
  traefik:
    image: docker.io/library/traefik:v3.3.4
    ports:
      - '80:80'
      - '443:443'
      - '8080:8080'
    environment:
      - CLOUDFLARE_DNS_API_TOKEN=${CLOUDFLARE_DNS_API_TOKEN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config/:/etc/traefik/:ro
      - ./certs/:/var/traefik/certs/:rw
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.dashboard.rule=Host(`traefik.ozzurep.tech`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))'
      - 'traefik.http.routers.dashboard.entrypoints=websecure'
      - 'traefik.http.routers.dashboard.service=api@internal'
      - 'traefik.http.routers.dashboard.middlewares=auth'
      - 'traefik.http.middlewares.auth.basicauth.users=maria:$$2y$$05$$DFC5lBelqG4jS7i5gJG/bep/0fSsSgz.vdT9aXDOxSJtIu36WjUDK'
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
    networks:
      - traefik-network
    restart: unless-stopped

  frontend:
    build:
      context: ./portfolio-front
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.frontend.rule=Host(`ozzurep.tech`)'
      - 'traefik.http.routers.frontend.entrypoints=websecure'
      - 'traefik.http.routers.frontend.tls=true'
      - 'traefik.http.routers.frontend.tls.certresolver=cloudflare'
      - 'traefik.http.services.frontend.loadbalancer.server.port=80'
    restart: unless-stopped
    networks:
      - traefik-network

  backend:
    build: ./portfolio-back
    ports:
      - '3333:3333'
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.backend.rule=Host(`api.ozzurep.tech`)'
      - 'traefik.http.routers.backend.entrypoints=websecure'
      - 'traefik.http.routers.backend.tls=true'
      - 'traefik.http.routers.backend.tls.certresolver=cloudflare'
      - 'traefik.http.services.backend.loadbalancer.server.port=3333'
    environment:
      - DATABASE_URL=postgresql://ozzu:marij@postgres:5432/portfolio
      - IS_LOCAL=true
      - PORT=3333
    restart: unless-stopped
    deploy:
      mode: replicate
      replicas: 1 
    networks:
      - traefik-network
    depends_on:
      - postgres

  postgres:
    image: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ozzu
      POSTGRES_PASSWORD: marij
      POSTGRES_DB: portfolio
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - traefik-network
    labels:
      - 'traefik.enable=false'
 
  # Grafana - Visualization & Dashboards
  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=securepassword
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - traefik-network
    depends_on:
      - prometheus
      - loki
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.grafana.rule=Host(`grafana.ozzurep.tech`)'
      - 'traefik.http.routers.grafana.entrypoints=websecure'
      - 'traefik.http.routers.grafana.tls=true'
      - 'traefik.http.routers.grafana.tls.certresolver=cloudflare'
      - 'traefik.http.services.grafana.loadbalancer.server.port=3000'

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - traefik-network
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.prometheus.rule=Host(`prometheus.ozzurep.tech`)'
      - 'traefik.http.routers.prometheus.entrypoints=websecure'
      - 'traefik.http.routers.prometheus.tls=true'
      - 'traefik.http.routers.prometheus.tls.certresolver=cloudflare'
      - 'traefik.http.services.prometheus.loadbalancer.server.port=9090'
      - 'traefik.http.routers.prometheus.middlewares=auth'

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - traefik-network
    labels:
      - 'traefik.enable=false'

  # cAdvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    restart: unless-stopped
    networks:
      - traefik-network
    labels:
      - 'traefik.enable=false'

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:latest
    volumes:
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - traefik-network
    labels:
      - 'traefik.enable=false'

  # Promtail - Log Collection
  promtail:
    image: grafana/promtail:latest
    volumes:
      - /var/log:/var/log
      - ./config/promtail/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    networks:
      - traefik-network
    depends_on:
      - loki
    labels:
      - 'traefik.enable=false'


networks:
  traefik-network:
    driver: bridge

volumes:
  postgres_data:
  grafana_data:
  prometheus_data:
  loki_data:
