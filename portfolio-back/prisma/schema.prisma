generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider   = "prisma-dbml-generator"
  output     = "./dbml"
  outputName = "blog-schema.dbml"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String   @unique
  bio         String?
  posts       Post[]
  pictureUrl  String?
  socialLinks Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Series {
  id          Int      @id @default(autoincrement())
  title       String   @unique()
  description String?
  slug        String   @unique()
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)
}

model Post {
  id          Int       @id @default(autoincrement())
  authors     Author[]
  title       String    @unique()
  abstract    String
  content     String
  images      Image[]
  publishedAt DateTime? @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tags        Tag[]
  seriesId    Int?
  series      Series?   @relation(fields: [seriesId], references: [id])
  isDraft     Boolean   @default(true)
  slug        String    @unique()
}

model Image {
  id        Int      @id @default(autoincrement())
  filename  String
  data      Bytes
  mimeType  String
  size      Int
  alt       String?
  caption   String?
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, filename])
}

enum Tag {
  AWS
  GIS
  IAC
  NEST
  POSTGRES
  PRISMA
  PYTHON
  REACT
  TERRAFORM
  TEST
  TYPEORM
  TYPESCRIPT
}
